image: node:13

before_script:
  ##
  ## Install ssh-agent if not already installed, it is required by Docker.
  ## (change apt-get to yum if you use an RPM-based image)
  ##
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git -y )'

  ##
  ## Run ssh-agent (inside the build environment)
  ##
  - eval $(ssh-agent -s)

  ##
  ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  ## We're using tr to fix line endings which makes ed25519 keys work
  ## without extra base64 encoding.
  ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
  ##
  - echo "$SSH_PRIVATE_KEY"
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -

  ##
  ## Create the SSH directory and give it the right permissions
  ##
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh

  ##
  ## Use ssh-keyscan to scan the keys of your private server. Replace gitlab.com
  ## with your own domain name. You can copy and repeat that command if you have
  ## more than one server to connect to.
  ##
  - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts


cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/

stages:
  - build
  - deploy

build_parcel_master:
  stage: build
  script:
    - npm install
    - npm install -g parcel-bundler
    - node -v
    - parcel build ./src/index.html --public-url ./
  artifacts:
    expire_in: 20 mins
    paths:
      - dist
  only:
    - master

deploy_master:
  stage: deploy
  variables:
    SERVEUR: "quentin@85.208.144.169"
    CHEMIN: "/var/www/dev/dfl-dashboard/dist/"
  script:
    - which rsync || ( apt update -y && apt install rsync -y )
    - ls -la
    - ssh quentin@85.208.144.169
    - /usr/bin/rsync -rKzlvhq --stats --delete-after --ignore-errors --force --itemize-changes ./dist/ ${SERVER}:{CHEMIN}. --exclude-from="exclude.build"
  only:
    - master